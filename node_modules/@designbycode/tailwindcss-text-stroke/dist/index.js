var __getOwnPropNames = Object.getOwnPropertyNames;
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var require_index = __commonJS({
  "index.js"(exports, module) {
    function getDefaultExportFromCjs(x) {
      return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, "default") ? x["default"] : x;
    }
    var createPlugin$2 = {};
    var createPlugin$1 = {};
    (function(exports2) {
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      Object.defineProperty(exports2, "default", {
        enumerable: true,
        get: function() {
          return _default;
        }
      });
      function createPlugin2(plugin2, config) {
        return {
          handler: plugin2,
          config
        };
      }
      createPlugin2.withOptions = function(pluginFunction, configFunction = () => ({})) {
        const optionsFunction = function(options) {
          return {
            __options: options,
            handler: pluginFunction(options),
            config: configFunction(options)
          };
        };
        optionsFunction.__isOptionsFunction = true;
        optionsFunction.__pluginFunction = pluginFunction;
        optionsFunction.__configFunction = configFunction;
        return optionsFunction;
      };
      const _default = createPlugin2;
    })(createPlugin$1);
    (function(exports2) {
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      Object.defineProperty(exports2, "default", {
        enumerable: true,
        get: function() {
          return _default;
        }
      });
      const _createPlugin = /* @__PURE__ */ _interop_require_default(createPlugin$1);
      function _interop_require_default(obj) {
        return obj && obj.__esModule ? obj : {
          default: obj
        };
      }
      const _default = _createPlugin.default;
    })(createPlugin$2);
    let createPlugin = createPlugin$2;
    var plugin = (createPlugin.__esModule ? createPlugin : { default: createPlugin }).default;
    const plugin$1 = /* @__PURE__ */ getDefaultExportFromCjs(plugin);
    var flattenColorPalette$1 = {};
    (function(exports2) {
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      Object.defineProperty(exports2, "default", {
        enumerable: true,
        get: function() {
          return _default;
        }
      });
      const flattenColorPalette2 = (colors) => Object.assign({}, ...Object.entries(colors !== null && colors !== void 0 ? colors : {}).flatMap(([color, values]) => typeof values == "object" ? Object.entries(flattenColorPalette2(values)).map(([number, hex]) => ({
        [color + (number === "DEFAULT" ? "" : `-${number}`)]: hex
      })) : [
        {
          [`${color}`]: values
        }
      ]));
      const _default = flattenColorPalette2;
    })(flattenColorPalette$1);
    const flattenColorPalette = /* @__PURE__ */ getDefaultExportFromCjs(flattenColorPalette$1);
    module.exports = plugin$1.withOptions(
      function() {
        return function({ addComponents, matchUtilities, theme }) {
          addComponents({
            ".text-stroke": {
              "-webkit-text-fill-color": "var(--tst-text-stroke-fill-color, currentColor)",
              "-webkit-text-stroke-width": `var(--tst-text-stroke-width, thin)`,
              "-webkit-text-stroke-color": "var(--tst-text-stroke-color, black)"
            }
          });
          matchUtilities(
            {
              "text-stroke": (value) => {
                return {
                  "-webkit-text-fill-color": "var(--tst-text-stroke-fill-color, currentColor)",
                  "-webkit-text-stroke-width": `var(--tst-text-stroke-width, ${value})`,
                  "-webkit-text-stroke-color": "var(--tst-text-stroke-color, black)"
                };
              }
            },
            {
              values: theme("textStrokeWidth")
            }
          );
          matchUtilities(
            {
              "text-stroke": (value) => ({
                "--tst-text-stroke-color": value
              })
            },
            {
              values: flattenColorPalette(theme("colors")),
              type: "color"
            }
          );
          matchUtilities(
            {
              "text-stroke-fill": (value) => ({
                "--tst-text-stroke-fill-color": value
              })
            },
            {
              values: flattenColorPalette(theme("colors")),
              type: "color"
            }
          );
        };
      },
      function() {
        return {
          theme: {
            textStrokeWidth: {
              thin: "thin",
              medium: "medium",
              thick: "thick",
              none: "unset",
              0: "0",
              1: "1px",
              2: "2px",
              3: "3px"
            }
          }
        };
      }
    );
  }
});
export default require_index();
